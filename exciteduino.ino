#include <Wire.h>
#include "U8glib.h"

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);	// I2C / TWI  constructor of ssd1306 oled

const uint8_t rook_bitmap[] PROGMEM = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x07,0xE3,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x83,0xFF,0xFF,0xE1,0xE0,0x0C,0x7F,0xF8,0x07,0xC0,0xFF,0xCF,
0xFF,0xFF,0xFF,0xF8,0x03,0xEF,0xFF,0xC0,0xE0,0x04,0x1F,0xE0,0x3F,0xC0,0x7F,0xCF,
0xFF,0xFF,0xFF,0xF0,0x07,0xC7,0xE7,0x80,0xE0,0x06,0x03,0xE1,0xFF,0xC0,0x3F,0x8F,
0xFF,0xFF,0xFF,0xF9,0xFF,0xE3,0xC7,0x1D,0xFC,0x7F,0x80,0x63,0xFF,0xC6,0x1F,0x8F,
0xFF,0xF8,0x7F,0xF9,0xFF,0xF1,0x8F,0x1F,0xFC,0x7F,0xC0,0x23,0xFF,0xC7,0x0F,0x9F,
0xFF,0xF0,0xFF,0xF9,0xFF,0xF1,0x1E,0x3F,0xFC,0x7F,0x8E,0x33,0xC3,0x8F,0x87,0x9F,
0xFD,0xFC,0xFF,0xF8,0x83,0xF8,0x3E,0x3F,0xFC,0x7F,0x8F,0xF0,0x03,0x8F,0xC7,0x9F,
0xF9,0xFC,0xF0,0x78,0x03,0xFC,0x7E,0x7F,0xFC,0x7F,0x8F,0xF0,0x0F,0x8F,0xE3,0x9F,
0xF9,0xFC,0xF3,0xF8,0x1F,0xF8,0x7C,0x7F,0xFC,0x7F,0x9F,0xF0,0x7F,0x8F,0xE3,0x9F,
0xE0,0x3C,0xF1,0xF8,0xFF,0xF0,0x3C,0x7F,0x7C,0x7F,0x9F,0xF1,0xFF,0x9F,0xE3,0xBF,
0xF9,0xFC,0xF8,0x78,0xFF,0xE3,0x3C,0x7E,0x3C,0x7F,0x1F,0xF1,0xFF,0x1F,0xE3,0xFF,
0xF9,0xFC,0x7E,0x7C,0xFF,0x87,0x1E,0x3C,0x3C,0x7F,0x1F,0xF9,0xFF,0x1F,0xC7,0xFF,
0xF9,0xF0,0x10,0x7C,0xE1,0x8F,0x8E,0x10,0x60,0x07,0x3F,0xF8,0xE0,0x0F,0x87,0x3F,
0xFF,0xF8,0x30,0xFC,0x01,0xFF,0x8F,0x00,0xE0,0x06,0x3F,0xF8,0x01,0x00,0x0F,0x3F,
0xFF,0xFF,0xFF,0xFE,0x07,0xFF,0xDF,0x83,0xF3,0xFF,0x7F,0xFC,0x07,0xC0,0x1F,0x7F,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xF8,0x7F,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
};

void draw(void) {
  // graphic commands to redraw the complete screen should be placed here  
  u8g.drawBitmapP( 0, 0, 16, 64, rook_bitmap);
}

void setup()
{
  Serial.begin(9600);
  Serial.println("start");
}

void loop()
{
  
  // picture loop
  u8g.firstPage();  
  do {
    draw();
    Serial.println("excited");
  } while( u8g.nextPage() );
  
  // rebuild the picture after some delay
  delay(2000);
  
}

/*
//uno code
String inputString = "";         // a string to hold incoming data
boolean stringComplete = false;  // whether the string is complete

void setup() 
{
  Serial.begin(9600);
  pinMode(13,OUTPUT);
}

void loop() 
{ 
  digitalWrite(13,HIGH);
  delay(1000);
  digitalWrite(13,LOW);
  delay(1000);
}

void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    inputString += inChar;
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == '\n') 
    {
      stringComplete = true;
    }
    
    if (stringComplete) 
    {
      Serial.println(inputString);
      // clear the string:
      inputString = "";
      stringComplete = false;
    }
  }
}
*/

